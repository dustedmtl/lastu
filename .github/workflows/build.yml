name: Build software version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: false
  push:
    tags:
      - 'v*' # Matching documentation

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Generate Version
        id: get_version
        run: |
          version="${{ github.event.inputs.version }}"
          echo ${{ github.ref }}
          if [[ -z "$version" ]]; then
            version="$(echo ${{ github.ref }} | sed 's#refs/tags/v##')"
          fi
          echo "$version" > version.txt

      - name: Save version number to file
        uses: actions/upload-artifact@v1
        with:
          name: version_number
          path: version.txt

  build:
    needs: version
    runs-on: ${{ matrix.os }}

    strategy:
      matrix: 
#          os: [windows-latest, macos-latest]
          os: [macos-latest]
#          os: [windows-latest]

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: version_number

      - name: get version Windows
        if: runner.os == 'Windows'
        run: |
          $version = (Get-Content -Path version.txt).Trim()
          echo "Version number is $version"
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: get version mac
        if: runner.os == 'macOS'
        run: |
          version=`cat version.txt`
          echo "New variable value is $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
    
      - name: Install dependencies
        run: pip3 install -r packaging-requirements.txt

      - name: Build executable for Windows
        if: runner.os == 'Windows'
        run: |
          # $version = (Get-Content -Path version.txt).Trim()
          $version = "${{ env.VERSION }}"
          $env:VER = $version
          python win-version.py
          create-version-file win-version.yaml --outfile win-version.txt
          pyinstaller ui-qt6-win.spec
          $folder = "wm2-$version"
          New-Item -Path $folder -ItemType Directory
          Copy-Item -Path dist/wm2.exe -Destination $folder -Force
          Copy-Item -Path wm2.ini -Destination $folder -Force
          Compress-Archive -Path $folder -DestinationPath "wm2-$version.zip"
          echo "PKGFILE=wm2-$version.zip" >> $env:GITHUB_ENV
          # echo "::set-output name=package::wm2-$version.zip"

      - name: Build executable for macOS
        if: runner.os == 'macOS'
        run: |
          $version="${{ env.VERSION }}"
          $folder="wm2-$version"
          mkdir $folder
          pyinstaller ui-qt6.spec
          cp -a dist/wm2.app $folder
          cp wm2.ini $folder
          hdiutil create -format UDZO -srcfolder $folder "wm2-$version.dmg"
          echo "PKGFILE=wm2-$version.dmg" >> $GITHUB_ENV
          # echo "::set-output name=package::wm2-$version.dmg"
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Executable Package
          path: ${{ env.PKGFILE }}
